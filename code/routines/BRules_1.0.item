/*
 * Copyright (C) 2011 Bekwam, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package routines;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CodingErrorAction;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.commons.lang3.StringUtils;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber.PhoneNumber;

public class BRules {

	private final static String UTF8_CHARSET = "UTF-8";
	
    /**
     * isPhoneNum: true if valid in accordance with country specifier; uses
     * strict check
     * 
     * {talendTypes} String
     * 
     * {Category} Validation
     * 
     * {param} string("regionCode") input: The country or region code to use
     * {param} string("phoneNumber") input: The phone number to check
     * 
     * {example} isPhoneNum("US", "(301) 555-5555") # true
     */
	public static boolean isPhoneNum(String _countryCode, String _toValidate) {
		return isPhoneNum(_countryCode, _toValidate, false);
	}

    /**
     * isPhoneNum: true if valid in accordance with country specifier and
     * loose flag (false for strict)
     * 
     * {talendTypes} String
     * 
     * {Category} Validation
     * 
     * {param} string("regionCode") input: The country or region code to use
     * {param} string("phoneNumber") input: The phone number to check
     * {param} boolean: use loose validation (true) or strict (false)
     * 
     * {example} isPhoneNum("US", "(301) 555-5555") # true
     */
	public static boolean isPhoneNum(String _countryCode, String _toValidate, boolean _loose) {
		
		boolean valid = false;

		PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
		
		try {
			PhoneNumber pn = phoneUtil.parse(_toValidate, _countryCode);
			if( _loose ) {
				valid = phoneUtil.isPossibleNumber(pn);
			}
			else {
				valid = phoneUtil.isValidNumber(pn);
			}
		}
		catch(NumberParseException ignore) {}
		
		return valid;
	}
	
    /**
     * all: true if all arguments are not empty (not null for Objects,
     * not null, empty string, or whitespace for java.lang.String)
     * 
     * {talendTypes} String
     * 
     * {Category} Validation
     * 
     * {param} object() input: a variable number of params to check
     * 
     * {example} all("one", "two", "")  # false
     * {example} all("one") # true
     */
	public static boolean all(Object..._objects) {
		boolean allSet = true;
		if( _objects == null ) return false;
		for( Object obj : _objects) {
			if( obj instanceof String ) {
				if( StringUtils.isEmpty((String)obj) ) {
					allSet = false;
					break;
				}
			}
			else {
				if( obj == null ) {
					allSet = false;
					break;
				}
			}
		}
		return allSet;
	}
	
    /**
     * xor: true if one and only one argument is not empty (not null for Objects,
     * not null, empty string, or whitespace for java.lang.String)
     * 
     * {talendTypes} String
     * 
     * {Category} Validation
     * 
     * {param} object() input: a variable number of params to check
     * 
     * {example} xor("one", "")  # true
     * {example} xor("", "") # false
     */
	public static boolean xor(Object..._objects) {
		boolean onlyOneSet = false;
		if( _objects == null ) return false;
		for( Object obj : _objects) {
			if( obj instanceof String ) {
				if( StringUtils.isNotEmpty((String)obj) ) {
					if( !onlyOneSet ) {
						onlyOneSet = true;
					}
					else {
						onlyOneSet = false;
						break;
					}
				}
			}
			else {
				if( obj != null ) {
					if( !onlyOneSet ) {
						onlyOneSet = true;
					}
					else {
						onlyOneSet = false;
						break;
					}
				}
			}
		}
		return onlyOneSet;
	}
	
	/**
	 * isBlank: true if the string is null, the empty string, or whitespace
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Validation
	 * 
	 * {param} string("hello") input : string to be tested
	 * 
	 * {example} isBlank("hello") # false
	 * {example} isBlank(null) # true
	 * {example} isBlank("") # true
	 * {example} isBlank("     ") # true
	 * 
	 */
	public static boolean isBlank(String _s) { 
		return StringUtils.isBlank(_s);
	}
	
    /**
     * isXML: true if the passed-in string adheres to XML well-formedness
     * and the specified charset
     * 
     * {talendTypes} String
     * 
     * {Category} Validation
     * 
     * {param} string("<message>hello</message>") input: xml to be tested
     * {param} string("ISO8859_1") input: the charset of the xml
     * 
     * {example} isXML("<message>hello</message>", "ISO8859_1") # true
     * {example} isXML("<message>hello", "ISO8859_1") # false
     */
	public static boolean isXML(String _xml, String _charset) throws Exception {
		
		boolean result = false;
		
		if( StringUtils.isEmpty(_xml) ) return false;
		
		try {
			SAXParserFactory factory = SAXParserFactory.newInstance();
			factory.setValidating(true);

			SAXParser parser = factory.newSAXParser();
			
			InputStream is = new ByteArrayInputStream(_xml.getBytes(_charset));
			
			parser.parse(is, new DefaultHandler());
			
			result = true;
		}
		catch(SAXParseException ignore) {}
		
		return result;
	}
	
    /**
     * isXML: true if the passed-in string adheres to XML well-formedness
     * using a UTF-8 string
     * 
     * {talendTypes} String
     * 
     * {Category} Validation
     * 
     * {param} string("<message>hello</message>") input: xml to be tested
     * 
     * {example} isXML("<message>hello</message>") # true
     * {example} isXML("<message>hello") # false
     */
	public static boolean isXML(String _xml) throws Exception {
		return isXML(_xml, UTF8_CHARSET);
	}
	
	/**
	 * okChars: true if the passed-in string is valid for the specified 
	 * character set
	 * 
	 * The supported character set values are those supported by Java.  The 
	 * particular constants include "ASCII", "Cp1252", "ISO8859_1", "UTF-8".
	 * 
	 * If the string parameter is empty or null, 'true' is returned.
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Validation
	 * 
	 * {param} string("hello") input: string to be tested
	 * {param} string("charset") input: charset of string
	 * 
	 * {example} okChar("hello", "ISO8859_1") # true
	 */
	public static boolean okChars(String _s, String _charset) {
		if( StringUtils.isEmpty(_s) ) { return true; }
		CharsetEncoder encoder = Charset.forName(_charset).newEncoder();
		return encoder.canEncode(_s);
	}
	
	/**
	 * toCharset: convert a string to the character set used by Windows Latin-1.
	 * Will convert unmappable characters to a space (" ") rather than throwing
	 * an error
	 * 
	 * For example, this will conveniently map a \u2122 (TM) symbol to a 
	 * Windows-recognized hex 99
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Validation
	 * 
	 * {param} string(_s) input string to convert
	 * {example} toCharset("My Product\u2122") # returns "My Product "
	 */
	public static String toCharset(String _s) {
		return toCharset(_s, "Cp1252");
	}
	
	/**
	 * toCharset: convert a string to the specified character set
	 * Will convert unmappable characters to a space (" ") rather than throwing
	 * an error
	 * 
	 * For example, this will conveniently map a \u2122 (TM) symbol to a 
	 * Windows-recognized hex 99
	 * 
	 * Uses Java names for charsets: Cp1252, US-ASCII
	 * {talendTypes} String
	 * 
	 * {Category} Validation
	 * 
	 * {param} string(_s) input string to convert
	 * {param} string(_charset) character set to use for conversion
	 * {example} toCharset("My Product\u2122", "Cp1252") # returns "My Product "
	 */
	public static String toCharset(String _s, String _charset) {
		String cs = (_charset==null||_charset.isEmpty())?"Cp1252":_charset;
		return toCharset(_s,cs," ");
	}
	
	/**
	 * toCharset: convert a string to the specified character set
	 * 
	 * Will convert unmappable characters to a specified character
	 * 
	 * For example, this will conveniently map a \u2122 (TM) symbol to a 
	 * Windows-recognized hex 99
	 * 
	 * Uses Java names for charsets: Cp1252, US-ASCII, ISO-8859-1, UTF-8, UTF-16
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Validation
	 * 
	 * {param} string(_s) input string to convert
	 * {param} string(_charset) character set to use for conversion
	 * {param} string(_replaceCh) character to use for unmappables
	 * {example} toCharset("My Product\u2122", "Cp1252", "?") # returns "My Product?"
	 */
	public static String toCharset(String _s, String _charset, String _replaceCh) {
		String s = "";
		String cs = (_charset==null||_charset.isEmpty())?"Cp1252":_charset;
		String rc = (_replaceCh==null||_replaceCh.isEmpty())?" ":_replaceCh;
				
		try {
			CharsetEncoder enc = Charset.forName(cs).newEncoder();
			enc.onUnmappableCharacter(CodingErrorAction.REPLACE);
			enc.replaceWith( rc.getBytes() );
			ByteBuffer buf  = enc.encode(CharBuffer.wrap(_s));		
			s = new String(buf.array(),cs);
		}
		catch (Exception ignore) {}
		
		return s;
		
	}

}

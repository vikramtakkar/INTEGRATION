package routines;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class TerritoryParentMap {

	public static enum TerritoryParentMapError {
		GRAPH_CYCLE
	}

	private static class TreeMap {
		protected Map<Integer, Integer>	map;
		protected Set<Integer>			parents; // set of parents to avoid traversal
		protected
		TreeMap()
		{
			this.map = new HashMap<Integer, Integer>();
			this.parents = new HashSet<Integer>();
		}
		protected TerritoryParentMapError
		noteParent(int territory_id, Integer parent_id)
		{
			Integer	new_node = new Integer(territory_id);

			map.put(new_node, parent_id);
			parents.add(parent_id);

			// check for cycle
			Integer	probe = new_node;
			for (int i = 0; i < map.size() + 1; i++) {
				//System.out.println("Probing "+probe.toString());
				probe = map.get(probe);
				if (probe == null)
					return(null);	// no cycle, no error
			}

			return(TerritoryParentMapError.GRAPH_CYCLE);
		}
		protected int
		getLevel(Integer territory_id)
		{
	    	int		lvl = 0;
	    	//System.out.println("Territory "+territory_id.toString());
	    	while (territory_id != null) {
	    		lvl++;
	    		territory_id = map.get(territory_id); // get parent
	    		//System.out.println("lvl="+lvl+" territory_id="+territory_id);
	    	}

	    	return(lvl);
		}
		protected boolean
		isHighestLevel(Integer territory_id)
		{
			return(map.get(territory_id) == null);
		}
		protected boolean
		isLowestLevel(Integer territory_id)
		{
    		return( ! parents.contains(territory_id));
		}
	}

	private static Map<Integer, TreeMap>	treemap_map
						= new HashMap<Integer, TerritoryParentMap.TreeMap>();

	/**
     * noteParent: note a territory => parent relationship
     * 
     * 
     * {talendTypes} void
     * 
     * {Category} User Defined
     * 
     * {param} int | Integer partner_id: Partner ID the territories are in.
     * {param} int | Integer territory_id: Sales territory ID.
     * {param} int | Integer parent_territory_id: Parent sales territory ID,
     * null for root.
     * 
     * {example} noteParent(217, 3,1)
     */

	public static TerritoryParentMapError
    noteParent(int partner_id, int territory_id, Integer parent_territory_id)
    {
		TreeMap		tmap = getTreeMap(partner_id);

		return (tmap.noteParent(territory_id, parent_territory_id));
    }

	/**
     * getTerritoryLevel: get the level in the hierarchy of a
     * sales territory.  Level 1 is highest.
     * 
     * 
     * {talendTypes} int
     * 
     * {Category} User Defined
     * 
     * {param} int | Integer partner_id: Partner ID the territories are in.
     * {param} int | Integer territory_id: Sales territory ID.
     * 
     * {example} getTerritoryLevel(217, 3)
     */
    public static int
    getTerritoryLevel(int partner_id, Integer territory_id)
    {
    	TreeMap	tmap = getTreeMap(partner_id);
    	//System.out.println("Getting level for "+territory_id.toString());
    	return(tmap.getLevel(territory_id));
    }

	/**
     * isHighestLevel: check whether a territory is at the highest
     * level (lowest number) in the hierarchy.
     * 
     * 
     * {talendTypes} boolean
     * 
     * {Category} User Defined
     * 
     * {param} int | Integer partner_id: Partner ID the territories are in.
     * {param} int | Integer territory_id: Sales territory ID.
     * 
     * {example} isLowestLevel(4)
     */
    public static boolean
    isHighestLevel(int partner_id, int territory_id)
    {
    	TreeMap	tmap = getTreeMap(partner_id);

    	return(tmap.isHighestLevel(territory_id));
    }

	/**
     * isLowestLevel: check whether a territory is at the lowest
     * level (highest number) in the hierarchy.
     * 
     * 
     * {talendTypes} boolean
     * 
     * {Category} User Defined
     * 
     * {param} int | Integer partner_id: Partner ID the territories are in.
     * {param} int | Integer territory_id: Sales territory ID.
     * 
     * {example} isLowestLevel(4)
     */
    public static boolean
    isLowestLevel(int partner_id, int territory_id)
    {
    	TreeMap	tmap = getTreeMap(partner_id);

    	return(tmap.isLowestLevel(territory_id));
    }

    private static TreeMap
    getTreeMap(int partner_id)
    {
    	TreeMap		tmap = treemap_map.get(partner_id);

    	if (tmap == null) {
    		tmap = new TreeMap();
    		treemap_map.put(partner_id, tmap);
    	}

    	return(tmap);
    }
}

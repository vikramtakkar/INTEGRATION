package routines;
import java.util.ArrayList;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ParentSort {
    
    static ArrayList<int[]> PSList;
    static ArrayList<int[]> PSListCopy;
    
    
    static {
    	PSList = new ArrayList<int[]>();
    }
    
    //public ParentSort() {
    	//PSList = new ArrayList<int[]>();
    	//name = "ParentSort";
    //}
    
    public static void add(int c, int p) {
    	PSList.add(new int[]{c, p});
    }
    
    public static int removeCount(int c) {
    	int removeCount = 0;
    	for(int i = 0; i < PSList.size(); i++) {
    		if(PSList.get(i)[0] == c) {
    			PSList.remove(i);
    			removeCount++;
    		}
    	}
    	return removeCount;
    }
    
    public static boolean remove(int c) {
    	return removeCount(c) > 0;
    }
    
    public static int size() {
    	return PSList.size();
    }
    
    public static void sort() {
    	PSListCopy = new ArrayList<int[]>();
    	while(!PSList.isEmpty()) {
    		//go through id-parent pairs
    		for(int i = 0; i < PSList.size(); i++) {
    			//if parent is null
    			if(PSList.get(i)[1] == Integer.MIN_VALUE) {
    				PSListCopy.add(PSList.get(i));
    				PSList.remove(i);
    				if(i > 0) i--;
    				continue;
    			} else {
    			//if parent isn't null
    				for(int j = 0; j < PSListCopy.size(); j++) {
    					
    					if(PSList.get(i)[1] == PSListCopy.get(j)[0]) {
    						PSListCopy.add(PSList.get(i));
    						PSList.remove(i);
    						if(i > 0) i--;
    						break;
    					}
    				}
    			}
    			//System.out.println(i);
    		}
    	}
    	PSList = PSListCopy;
    	//print();
    }
    
    public static void print() {
    	for(int i = 0; i < PSList.size(); i++) {
    		System.out.println("Sorted: Index "+i+", ID "+PSList.get(i)[0]+", Parent "+PSList.get(i)[1]);
    	}
    }
    
    public static int index(int c, int p) {
    	int index = Integer.MIN_VALUE;
    	//System.out.println("Searching c = "+c+", p = "+p);
    	for(int i = 0; i < PSList.size(); i++) {
    		if((PSList.get(i)[0] == c) && (PSList.get(i)[1] == p)) {
    			//System.out.println("At i = "+i+" found c = "+PSList.get(i)[0]+", p = "+PSList.get(i)[1]);
    			index = i;
    			break;
    		}
    	}
    	//System.out.println("Returning "+index+" for c = "+c+", p = "+p);
    	return index;
    }

}
